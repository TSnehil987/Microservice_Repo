package com.ts.photoapp.apigateway;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;

import com.google.common.net.HttpHeaders;

import io.jsonwebtoken.Jwts;
import reactor.core.publisher.Mono;

/*
 * This filter class will be called before routing the Http Request to the destination microservice. This filter will 
 * check if the request end point contains jwt token and provided jwt token is signed with correct secret  
 */
@Component
public class AuthorizationHeaderFilter extends AbstractGatewayFilterFactory<AuthorizationHeaderFilter.Config> {

	@Autowired
	private Environment env;
	
	public AuthorizationHeaderFilter() {
		super(Config.class);
	}
	
	public static class Config {
		
	}

	//We write main business logic of our custom filter here
	@Override
	public GatewayFilter apply(Config config) {
		return (exchange, chain) -> {
			ServerHttpRequest request = exchange.getRequest();
			if(!request.getHeaders().containsKey(HttpHeaders.AUTHORIZATION)) {
				return onError(exchange, "No Authorization Header", HttpStatus.UNAUTHORIZED);
			}
			String authorizationHeader = request.getHeaders().get(HttpHeaders.AUTHORIZATION).get(0);
			String jwt = authorizationHeader.replace("Bearer", "");
			if(!isJwtValid(jwt)) {
				return onError(exchange, "Jwt token is not valid", HttpStatus.UNAUTHORIZED);
			}
			return chain.filter(exchange);
		};
	}
	
	private Mono<Void> onError(ServerWebExchange exchange, String err, HttpStatus status) {
		ServerHttpResponse response = exchange.getResponse();
		response.setStatusCode(status);
		return response.setComplete();
	}

	/*
	 * Here we are validating jwt token by checking the token secret and get hold of subject value 
	 * which is the userId (column in users table)
	 */
	private boolean isJwtValid(String jwt) {
		boolean returnValue = true;
		String subject = null;
		try {
			//this token.secret should match with what I have given in users ms else will throw 
			//'io.jsonwebtoken.SignatureException' exception
			subject = Jwts.parser().setSigningKey(env.getProperty("token.secret")).parseClaimsJws(jwt)
					.getBody().getSubject();
		} catch(Exception ex) {
			returnValue = false;
		}
		
		if(subject == null || subject.isEmpty()) {
			returnValue = false;
		}
		return returnValue;
	}
}
